#!/usr/bin/python

import argparse
import re
import requests
import sys

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3

def collect_args():
    parser = argparse.ArgumentParser(description='Check RabbitMQ queues')
    parser.add_argument('--username', '-u', type=str,
                        required=True,
                        help='username to use for authentication')

    parser.add_argument('--password', '-p', type=str,
                        required=True,
                        help='password to use for authentication')

    parser.add_argument('--warning', '-w', type=str,
                        required=False, default='50',
                        help='warning threshold (default: 50)')

    parser.add_argument('--critical', '-c', type=str,
                        required=False, default='100',
                        help='critical threshold (default: 100)')

    parser.add_argument('--host', '-H', type=str,
                        required=False, default='localhost',
                        help='host to check (default: localhost)')

    parser.add_argument('--port', '-P', type=int,
                        required=False, default='15672',
                        help='port (default: 15672)')

    parser.add_argument('--vhost', '-V', type=str,
                        required=False, default='',
                        help='vhost (default: None)')

    parser.add_argument('--queue', '-q', type=str, nargs='+',
                        required=False,
                        help='only check queues with name matching string')

    parser.add_argument('--ssl', action='store_true',
                        help='connect with ssl')

    return parser


def check_queues(args):
    protocol = 'https' if args.ssl else 'http'
    try:
        url = '%s://%s:%d/api/queues/%s' % (protocol, args.host, args.port,
                                            args.vhost)

        resp = requests.get(url, auth=(args.username, args.password))
        resp.raise_for_status()
    except requests.exceptions.HTTPError as e:
        raise Exception('URL Error %s' % str(e))

    try:
        queue_status = resp.json()
    except:
        raise Exception('failed to parse RabbitMQ queues')

    # Compatibility with old queue check
    warning = int(args.warning.split(',')[0])
    critical = int(args.critical.split(',')[0])
    if critical < warning:
        raise Exception('critical threshold must be greater than '
                        'warning threshold')

    errors = []
    state = STATE_OK

    # builds regex once
    if args.queue:
        queues = re.compile("(?=("+'|'.join(args.queue)+r"))")

    for q in queue_status:
        # Ignore temporary queues (e.g. reply, fanout) with expiry
        if q.get('arguments').get('x-expires'):
            continue

        if args.queue is not None and queues.search(q.get('name')) is None:
            continue

        messages = q.get('messages', 0)
        if messages > warning:
            if state < STATE_WARNING:
                state = STATE_WARNING
            errors.append("%s/%s (%d msgs)" % (q.get('vhost'), q.get('name'),
                          messages))

        if messages > critical:
            state = STATE_CRITICAL

    if state > STATE_WARNING:
        print('CRITICAL: %s' % ', '.join(errors))
        return STATE_CRITICAL

    if state > STATE_OK:
        print('WARNING: %s' % ', '.join(errors))
        return STATE_WARNING

    # Exit OK
    print('OK: RabbitMQ queues OK')


if __name__ == '__main__':
    args = collect_args().parse_args()
    try:
        sys.exit(check_queues(args))
    except Exception as e:
        print('ERROR: ' + str(e))
        sys.exit(STATE_UNKNOWN)
